variables:
  BINARY_NAME: sbcli
  USERNAME: lkeiser
  PROJECT: sbcli
  GITLAB_INSTANCE_URL: https://gitlab.gwdg.de
  REPOSITORY_URL: ${GITLAB_INSTANCE_URL}/${USERNAME}/${PROJECT}.git

stages:
  - build
  - release

.build_template: &build_template
  script:
    - rustup target add ${RUST_TARGET}
    - cargo build --release --target ${RUST_TARGET}
    - mkdir -p artifacts/${RUST_TARGET}
    - cp target/${RUST_TARGET}/release/${BINARY_NAME}* artifacts/${RUST_TARGET}/
  artifacts:
    paths:
      - artifacts/${RUST_TARGET}/

build_linux:
  <<: *build_template
  image: rust:latest
  stage: build
  variables:
    RUST_TARGET: x86_64-unknown-linux-gnu

build_macos:
  <<: *build_template
  tags:
    - macos
  stage: build
  variables:
    RUST_TARGET: x86_64-apple-darwin

build_windows:
  <<: *build_template
  tags:
    - windows
  stage: build
  variables:
    RUST_TARGET: x86_64-pc-windows-msvc

release:
  stage: release
  image: debian:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - apt-get update
    - apt-get install -y git curl jq
    - git clone ${REPOSITORY_URL}.git
    - mkdir -p release
    - for platform in x86_64-unknown-linux-gnu x86_64-apple-darwin x86_64-pc-windows-msvc; do
        if [[ $platform == "x86_64-pc-windows-msvc" ]]; then
          cp artifacts/$platform/${BINARY_NAME}.exe release/${BINARY_NAME}-$platform.exe;
        else
          cp artifacts/$platform/${BINARY_NAME} release/${BINARY_NAME}-$platform;
        fi
      done
    - |
      curl -XPOST -H "Authorization: Bearer ${GITLAB_API_TOKEN}" -H "Content-Type: application/json" -d '{
        "tag_name": "'"$CI_COMMIT_TAG"'",
        "name": "'"$CI_COMMIT_TAG"'",
        "description": "Release description here."
      }' ${GITLAB_INSTANCE_URL}/api/v4/projects/${CI_PROJECT_ID}/releases
    - |
      RELEASE_ID=$(curl -s -H "Authorization: Bearer ${GITLAB_API_TOKEN}" ${GITLAB_INSTANCE_URL}/api/v4/projects/${CI_PROJECT_ID}/releases | jq -r ".[] | select(.tag_name == \"$CI_COMMIT_TAG\") | .id")
      for file in release/*; do
        curl --request POST --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" --form "file=@$file" "${GITLAB_INSTANCE_URL}/api/v4/projects/${CI_PROJECT_ID}/uploads"
        FILE_URL=$(curl --request POST --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" --form "file=@$file" "${GITLAB_INSTANCE_URL}/api/v4/projects/${CI_PROJECT_ID}/uploads" | jq -r .url)
        curl -XPUT -H "Authorization: Bearer ${GITLAB_API_TOKEN}" -H "Content-Type: application/json" -d '{
          "assets": {
            "
            "links": [
              {
                "name": "'$(basename $file)'",
                "url": "'${GITLAB_INSTANCE_URL}/${USERNAME}/${PROJECT}/-/releases/'$RELEASE_ID'/downloads'$(echo $FILE_URL | sed 's/^\///')"',
                "filepath": "'$(echo $FILE_URL | sed 's/^\///')'"
              }
            ]
          }
        }' ${GITLAB_INSTANCE_URL}/api/v4/projects/${CI_PROJECT_ID}/releases/${RELEASE_ID}
      done